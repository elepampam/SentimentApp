'use strict';

var _arrayIncludes = require('array-includes');

var _arrayIncludes2 = _interopRequireDefault(_arrayIncludes);

var _morphological_utility = require('./lib/morphological_utility');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ShouldNotTransformTheseWords = ['lari', 'nikah', 'pilah', 'pakai', 'iman'];

function stem(word) {
	var derivationalStemming = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	var numberSyllables = (0, _morphological_utility.totalSyllables)(word);

	if (numberSyllables > 2) {
		word = (0, _morphological_utility.removePossesive)(word);
		if (derivationalStemming) word = stemDerivational(word);
	}

	if (numberSyllables > 2 && !(0, _arrayIncludes2.default)(ShouldNotTransformTheseWords, word)) {
		word = (0, _morphological_utility.removeParticle)(word);
		if (numberSyllables > 2) word = (0, _morphological_utility.removeParticle)(word);
		if (derivationalStemming) word = stemDerivational(word);
	}

	return word;
}

function stemDerivational(word) {
	var numberSyllables = (0, _morphological_utility.totalSyllables)(word);
	var previousLength = word.length;
	if (numberSyllables > 2) word = (0, _morphological_utility.removeFirstOrderPrefix)(word);

	if (previousLength === word.length) {
		if (numberSyllables > 2) word = (0, _morphological_utility.removeSecondOrderPrefix)(word);
		if ((0, _arrayIncludes2.default)(ShouldNotTransformTheseWords, word)) numberSyllables -= 1;
		if (numberSyllables > 2) word = (0, _morphological_utility.removeSuffix)(word);
	}

	return word;
}

module.exports = {
	stem: stem
};